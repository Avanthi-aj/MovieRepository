// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MovieLibrary.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProducerManagementInMovieLibraryFeature : object, Xunit.IClassFixture<ProducerManagementInMovieLibraryFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Producer.feature"
#line hidden
        
        public ProducerManagementInMovieLibraryFeature(ProducerManagementInMovieLibraryFeature.FixtureData fixtureData, MovieLibrary_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Producer Management in Movie Library", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create new Producer")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Management in Movie Library")]
        [Xunit.TraitAttribute("Description", "Create new Producer")]
        [Xunit.InlineDataAttribute("/producers", "{\"Name\":\"producer\",\"Bio\":\"bio\",\"DOB\": \"2003-03-03\",\"Gender\":\"Male\"}", "201", "{\"id\":1}", new string[] {
                "valiData"})]
        [Xunit.InlineDataAttribute("/producers", "{\"Name\" : \"\",\"Bio\":\"Bio here\",\"DOB\":\"2002-11-19\",\"Gender\":\"Male\"}", "400", "Producer Name cannot be null or empty.", new string[] {
                "invaliData"})]
        [Xunit.InlineDataAttribute("/producers", "{\"Name\" : \"producer\",\"Bio\":\"\",\"DOB\":\"2002-11-19\",\"Gender\":\"Male\"}", "400", "Producer Bio cannot be null or empty.", new string[] {
                "invaliData"})]
        [Xunit.InlineDataAttribute("/producers", "{\"Name\" : \"producer\",\"Bio\":\"Bio here\",\"DOB\":\"2024-12-12\",\"Gender\":\"Male\"}", "400", "DOB cannot be in the future.", new string[] {
                "invaliData"})]
        [Xunit.InlineDataAttribute("/producers", "{\"Name\" : \"producer\",\"Bio\":\"Bio here\",\"DOB\":\"2002-11-19\",\"Gender\":\"M\"}", "400", "Invalid gender value.", new string[] {
                "invaliData"})]
        public virtual void CreateNewProducer(string endpoint, string data, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Data", data);
            argumentsOfScenario.Add("Response Code", responseCode);
            argumentsOfScenario.Add("Response Data", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new Producer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.When(string.Format("I make a post request to \'{0}\' with the following data \'{1}\'", endpoint, data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
testRunner.Then(string.Format("the response code is \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
testRunner.And(string.Format("response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update Producer")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Management in Movie Library")]
        [Xunit.TraitAttribute("Description", "Update Producer")]
        [Xunit.InlineDataAttribute("/producers/1", "{\"Name\":\"producer\",\"Bio\":\"bio\",\"DOB\": \"2003-03-03\",\"Gender\":\"Male\"}", "200", "Producer Updated Successfully", new string[] {
                "valiData"})]
        [Xunit.InlineDataAttribute("/producers/5", "{\"Name\" : \"producer\",\"Bio\":\"Bio here\",\"DOB\":\"2002-11-19\",\"Gender\":\"Male\"}", "400", "Producer with Id 5 does not exists", new string[] {
                "invaliData"})]
        [Xunit.InlineDataAttribute("/producers/1", "{\"Name\" : \"\",\"Bio\":\"Bio here\",\"DOB\":\"2002-11-19\",\"Gender\":\"Male\"}", "400", "Producer Name cannot be null or empty.", new string[] {
                "invaliData"})]
        [Xunit.InlineDataAttribute("/producers/1", "{\"Name\" : \"producer\",\"Bio\":\"\",\"DOB\":\"2002-11-19\",\"Gender\":\"Male\"}", "400", "Producer Bio cannot be null or empty.", new string[] {
                "invaliData"})]
        [Xunit.InlineDataAttribute("/producers/1", "{\"Name\" : \"producer\",\"Bio\":\"Bio here\",\"DOB\":\"2024-12-12\",\"Gender\":\"Male\"}", "400", "DOB cannot be in the future.", new string[] {
                "invaliData"})]
        [Xunit.InlineDataAttribute("/producers/1", "{\"Name\" : \"producer\",\"Bio\":\"Bio here\",\"DOB\":\"2002-11-19\",\"Gender\":\"M\"}", "400", "Invalid gender value.", new string[] {
                "invaliData"})]
        public virtual void UpdateProducer(string endpoint, string data, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Data", data);
            argumentsOfScenario.Add("Response Code", responseCode);
            argumentsOfScenario.Add("Response Data", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Producer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
testRunner.When(string.Format("I make a put request to \'{0}\' with the following data \'{1}\'", endpoint, data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
testRunner.Then(string.Format("the response code is \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all Producers")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Management in Movie Library")]
        [Xunit.TraitAttribute("Description", "Get all Producers")]
        public virtual void GetAllProducers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all Producers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
testRunner.When("I make a get request to \'/producers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
testRunner.Then("the response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
testRunner.And("response data should be \'[{\"id\":1,\"name\":\"producer\",\"bio\":\"bio\",\"dob\":\"2003-03-03" +
                        "T00:00:00\",\"gender\":\"Male\"}]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get Producer By Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Management in Movie Library")]
        [Xunit.TraitAttribute("Description", "Get Producer By Id")]
        [Xunit.InlineDataAttribute("/producers/1", "200", "{\"id\":1,\"name\":\"producer\",\"bio\":\"bio\",\"dob\":\"2003-03-03T00:00:00\",\"gender\":\"Male\"" +
            "}", new string[] {
                "validData"})]
        [Xunit.InlineDataAttribute("/producers/5", "404", "Producer with Id 5 does not exists", new string[] {
                "invalidData"})]
        public virtual void GetProducerById(string endpoint, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Response Code", responseCode);
            argumentsOfScenario.Add("Response Data", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Producer By Id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
testRunner.When(string.Format("I make a get request to \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
testRunner.Then(string.Format("the response code is \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
testRunner.And(string.Format("response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete Producer")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Management in Movie Library")]
        [Xunit.TraitAttribute("Description", "Delete Producer")]
        [Xunit.InlineDataAttribute("/producers/1", "200", "Producer Deleted Successfully", new string[] {
                "validData"})]
        [Xunit.InlineDataAttribute("/producers/5", "400", "Trying to delete the producer with ID 5 which is not present", new string[] {
                "invalidData"})]
        public virtual void DeleteProducer(string endpoint, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Response Code", responseCode);
            argumentsOfScenario.Add("Response Data", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Producer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 68
testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
testRunner.When(string.Format("I make a delete request to \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
testRunner.Then(string.Format("the response code is \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
testRunner.And(string.Format("response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProducerManagementInMovieLibraryFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProducerManagementInMovieLibraryFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
